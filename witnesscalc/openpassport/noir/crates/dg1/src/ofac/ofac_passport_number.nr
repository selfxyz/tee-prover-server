use crate::types::DG1;
use crate::utils::other::smt::smt_verify;

pub fn ofac_passport_number(
    dg1: DG1,
    smt_leaf_value: Field,
    smt_root: Field,
    smt_siblings: [Field; 256],
) -> bool {
    let mut passport_number = [0; 9];

    for i in 0..9 {
        passport_number[i] = Field::from(dg1[49 + i]);
    }

    let passport_hash = std::hash::poseidon::bn254::hash_9(passport_number);

    smt_verify(passport_hash, smt_leaf_value, smt_root, smt_siblings, false)
}

mod tests {
    use super::ofac_passport_number;

    #[test]
    fn test_membership_proof() {
        let dg1 = [
            97, 91, 95, 31, 88, 80, 60, 70, 82, 65, 72, 69, 78, 65, 79, 60, 77, 79, 78, 84, 79, 89,
            65, 60, 60, 65, 82, 67, 65, 78, 71, 69, 76, 60, 68, 69, 60, 74, 69, 83, 85, 83, 60, 60,
            60, 60, 60, 60, 60, 57, 56, 108, 104, 57, 48, 53, 53, 54, 52, 70, 82, 65, 53, 52, 49,
            48, 48, 55, 49, 77, 51, 48, 48, 49, 48, 49, 53, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
            60, 60, 60, 60, 48, 50,
        ];

        let smt_leaf_value =
            19378463006833395365107737548446061070205240691229284490379626153269032586499;

        let smt_root = 8835534532168993302133750141226608592096167902191400765009673745674397224484;

        let smt_siblings = [
            3955491676910407004044472216026991675959367833592171188898198510428253371566,
            0,
            0,
            0,
            0,
            0,
            0,
            18050069708537439860494870379449931231983442566860206355084426800494240483417,
            0,
            1616493180105380757835583979003479501450823805344447027186980306459208668281,
            17329534438480855115635344322734434685059032905018848056522254264566705600021,
            15044767757340226465081834598908883700733033388697706874200923710607553803552,
            12269274693257994778026444445219794191551647294730703826482785664445598393747,
            14020620457951479001623520812728674141602457492519308338791364683313689919091,
            10972922004284943091660912095001768404074825208098932703502420258011736623699,
            6954429082210805353241355771971048027944686260967237748087875581927863631070,
            7725835406597329303714916306387998556969845398822724601324126370257570571627,
            5763248805726558661824921473992685470729864125408418377626966947655507831901,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ];

        //should be false
        assert(!ofac_passport_number(dg1, smt_leaf_value, smt_root, smt_siblings));
    }

    #[test]
    fn test_non_membership_proof() {
        let dg1 = [
            97, 91, 95, 31, 88, 80, 60, 70, 82, 65, 68, 85, 80, 79, 78, 84, 60, 60, 65, 76, 80, 72,
            79, 78, 83, 69, 60, 72, 85, 71, 72, 85, 69, 83, 60, 65, 76, 66, 69, 82, 84, 60, 60, 60,
            60, 60, 60, 60, 60, 49, 53, 65, 65, 56, 49, 50, 51, 52, 52, 70, 82, 65, 48, 52, 48, 50,
            49, 49, 49, 77, 51, 48, 48, 49, 48, 49, 53, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
            60, 60, 60, 48, 50,
        ];

        let mut smt_leaf_value =
            10720813908115827717913368881852413742238137063691424987013506811486899613202;

        let mut smt_root =
            8835534532168993302133750141226608592096167902191400765009673745674397224484;

        let smt_siblings = [
            21850086379231919719987400494781366163279608682195949528338021982623629438971,
            2292258584812296662466108928528027050538498389646176421566753234119492614945,
            12467834269246078881307747483550682012949343230803859859010831296556789807920,
            2462075995855523669617684755698005398338301848715269883270042006013201461269,
            12292768095463967230547002621575577158470919531653044337773911671174173215920,
            5109818590371274008574634507154067731398853358351813410663858630529528226623,
            10481784078638447052052245488559706904460793637681508513767526763815701991142,
            9928093918906812116607631424141818926877934757436031296761948821938361778434,
            8306498947975314010201063120789602670840420319063986591027308600956240702618,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ];

        assert(ofac_passport_number(dg1, smt_leaf_value, smt_root, smt_siblings));

        //wrong root - should be false
        smt_root -= 1234;

        assert(!ofac_passport_number(dg1, smt_leaf_value, smt_root, smt_siblings));
        smt_root += 1234;

        //wrong leaf value
        smt_leaf_value += 1234;
        assert(!ofac_passport_number(dg1, smt_leaf_value, smt_root, smt_siblings));
    }
}
