FROM public.ecr.aws/docker/library/rust:1.81-bookworm AS chef-init-server

RUN cargo install cargo-chef 

WORKDIR /src/

FROM chef-init-server AS planner-init-server
COPY tee-monorepo/initialization/init-server/Cargo.toml tee-monorepo/initialization/init-server/Cargo.lock ./
COPY tee-monorepo/initialization/init-server/src src/
RUN cargo chef prepare  --recipe-path recipe.json

FROM chef-init-server AS builder-init-server
COPY --from=planner-init-server /src/recipe.json recipe.json
RUN cargo chef cook --release --recipe-path recipe.json
COPY tee-monorepo/initialization/init-server/Cargo.toml tee-monorepo/initialization/init-server/Cargo.lock ./
COPY tee-monorepo/initialization/init-server/src src/

RUN cargo build --locked --release

FROM public.ecr.aws/docker/library/rust:1.81-bookworm AS chef-raw-proxy

RUN cargo install cargo-chef 

WORKDIR /src/

FROM chef-raw-proxy AS planner-raw-proxy
COPY tee-monorepo/networking/raw-proxy/Cargo.toml tee-monorepo/networking/raw-proxy/Cargo.lock ./
COPY tee-monorepo/networking/raw-proxy/src src/
RUN cargo chef prepare  --recipe-path recipe.json

FROM chef-raw-proxy AS builder-raw-proxy
COPY --from=planner-raw-proxy /src/recipe.json recipe.json
RUN cargo chef cook --release --recipe-path recipe.json
COPY tee-monorepo/networking/raw-proxy/Cargo.toml tee-monorepo/networking/raw-proxy/Cargo.lock ./
COPY tee-monorepo/networking/raw-proxy/src src/

RUN cargo build --locked --release

FROM docker.io/library/amazonlinux:2@sha256:b1b123fdcccab612861866f6e6d10823b2aee22357f10f27a66044207ccc3c89 AS instance_full_image

RUN apt-get update
RUN apt-get install build-essential cmake libgmp-dev libsodium-dev nasm curl m4 netcat-traditional socat iproute2 git jq unzip libc6 -y

# Install packages
#
RUN amazon-linux-extras install aws-nitro-enclaves-cli && \
    yum install aws-nitro-enclaves-cli-devel jq util-linux \
        unzip curl which file socat -y

# Install awscli v2
#
RUN \
    cd tmp && \
    curl "https://awscli.amazonaws.com/awscli-exe-linux-$(arch).zip" -o "awscliv2.zip" && \
    unzip awscliv2.zip && \
    ./aws/install

WORKDIR /ne-deps

# Copy only the required binaries to /ne-deps folder.
#
RUN BINS="\
    /usr/local/bin/aws \
    /usr/bin/nitro-cli \
    # /usr/bin/vsock-proxy \
    /usr/bin/file \
    /usr/bin/jq \
    /usr/bin/lscpu \
    /usr/bin/which \
    # /usr/bin/socat \
    " && \
    for bin in $BINS; do \
        { echo "$bin"; ldd "$bin" | grep -Eo "/.*lib.*/[^ ]+"; } | \
            while read path; do \
                mkdir -p ".$(dirname $path)"; \
                cp -fL "$path" ".$path"; \
            done \
    done

# Prepare other required files and folders for the final image.
#
RUN \
    mkdir -p /ne-deps/etc/nitro_enclaves && \
    mkdir -p /ne-deps/run/nitro_enclaves && \
    mkdir -p /ne-deps/var/log/nitro_enclaves && \
    cp -rf /usr/local/ /ne-deps/usr/ && \
    cp -rf /usr/share/nitro_enclaves/ /ne-deps/usr/share/ && \
    # cp -f /etc/nitro_enclaves/vsock-proxy.yaml /ne-deps/etc/nitro_enclaves

FROM amazonlinux:2 as instance

COPY --from=instance_full_image / /

COPY --from=builder-init-server /src/target/release/self-init-server /usr/local/bin/
COPY --from=builder-raw-proxy /src/target/release/vsock-to-ip-raw-outgoing /usr/local/bin/
COPY --from=builder-raw-proxy /src/target/release/ip-to-vsock-raw-incoming /usr/local/bin/

ARG PROOFTYPE=${PROOFTYPE}
ARG SIZE_FILTER=${SIZE_FILTER}
ARG TAG=${TAG}

COPY result/$PROOFTYPE-$SIZE_FILTER-$TAG/image.eif /home/tee-server.eif
# COPY instance-deps/run.sh /home

CMD ["/usr/local/bin/init-server"]