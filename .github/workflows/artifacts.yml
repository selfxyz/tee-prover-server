name: OpenPassport CI/CD
on:
  workflow_call:
    inputs:
      runner:
        description: The runner
        required: true
        type: string
      environment:
        description: The GitHub Actions environment
        required: true
        type: string
      tag:
        description: The tag
        required: true
        type: string

jobs:
  prod:
    runs-on: [self-hosted, "${{ inputs.runner }}"]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          # lfs: true

      # - name: Checkout lfs objects
      #   run: git lfs checkout

      - name: Install Artifacts
        run: |
          ARTIFACT_URL=$(curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
            "https://api.github.com/repos/celo-org/self/actions/artifacts" \
            | jq '.artifacts | max_by(.created_at)' | jq -r .'archive_download_url')
          echo "ARTIFACT_URL=$ARTIFACT_URL" >> $GITHUB_ENV

      - name: Download and unpack artifact
        run: |
          curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -o artifact.zip \
            "$ARTIFACT_URL"

      - name: Login to AWS
        run: |
          aws --profile default configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws --profile default configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Download and unpack zkeys
        run: |
          rm -rf zkeys
          chmod +x download_zkeys.sh && ./download_zkeys.sh
          mkdir zkeys
          for file in *_final.zkey; do mv "$file" "zkeys/${file%_final.zkey}.zkey"; done

      - name: Reformat zkeys
        run: |
          mkdir -p zkeys/register zkeys/disclose zkeys/dsc
          mv zkeys/register_* zkeys/register/
          mv zkeys/vc_and_disclose.zkey zkeys/disclose/ 
          mv zkeys/dsc_* zkeys/dsc/

      - name: Init submodules
        run: |
          git submodule update --init
          cd rapidsnark && git submodule update --init && cd ..

      - name: Login to Docker Hub
        run: |
          sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker enclave images
        run: |
          sudo docker build --push --build-arg PROOFTYPE=register --build-arg SIZE_FILTER=small  -f Dockerfile.tee --target=nitro-enclave -t ${{ secrets.DOCKER_ORGANIZATION }}/tee-server-register:${{ inputs.tag }} .
          sudo docker build --push --build-arg PROOFTYPE=register --build-arg SIZE_FILTER=medium -f Dockerfile.tee --target=nitro-enclave -t ${{ secrets.DOCKER_ORGANIZATION }}/tee-server-register-medium:${{ inputs.tag }} .
          sudo docker build --push --build-arg PROOFTYPE=disclose --build-arg SIZE_FILTER=small  -f Dockerfile.tee --target=nitro-enclave -t ${{ secrets.DOCKER_ORGANIZATION }}/tee-server-disclose:${{ inputs.tag }} .
          sudo docker build --push --build-arg PROOFTYPE=dsc      --build-arg SIZE_FILTER=small  -f Dockerfile.tee --target=nitro-enclave -t ${{ secrets.DOCKER_ORGANIZATION }}/tee-server-dsc:${{ inputs.tag }} .
          sudo docker build --push --build-arg PROOFTYPE=dsc      --build-arg SIZE_FILTER=medium -f Dockerfile.tee --target=nitro-enclave -t ${{ secrets.DOCKER_ORGANIZATION }}/tee-server-dsc-medium:${{ inputs.tag }} .

      - name: Cleanup zkeys
        run: rm -rf zkeys*

      - name: Build eifs
        run: |
          mkdir measurements && sudo chmod 777 measurements
          touch measurements/register.log && sudo chmod 777 measurements/register.log
          touch measurements/register-medium.log && sudo chmod 777 measurements/register-medium.log
          touch measurements/disclose.log && sudo chmod 777 measurements/disclose.log
          touch measurements/dsc.log && sudo chmod 777 measurements/dsc.log
          touch measurements/dsc-medium.log && sudo chmod 777 measurements/dsc-medium.log
          sudo nitro-cli build-enclave --docker-uri ${{ secrets.DOCKER_ORGANIZATION }}/tee-server-register:${{ inputs.tag }}        --output-file prover-server-register-small.eif  > measurements/register.log 2>&1
          sudo nitro-cli build-enclave --docker-uri ${{ secrets.DOCKER_ORGANIZATION }}/tee-server-register-medium:${{ inputs.tag }} --output-file prover-server-register-medium.eif > measurements/register-medium.log 2>&1
          sudo nitro-cli build-enclave --docker-uri ${{ secrets.DOCKER_ORGANIZATION }}/tee-server-disclose:${{ inputs.tag }}        --output-file prover-server-disclose-small.eif  > measurements/disclose.log 2>&1
          sudo nitro-cli build-enclave --docker-uri ${{ secrets.DOCKER_ORGANIZATION }}/tee-server-dsc:${{ inputs.tag }}             --output-file prover-server-dsc-small.eif       > measurements/dsc.log 2>&1
          sudo nitro-cli build-enclave --docker-uri ${{ secrets.DOCKER_ORGANIZATION }}/tee-server-dsc-medium:${{ inputs.tag }}      --output-file prover-server-dsc-medium.eif      > measurements/dsc-medium.log 2>&1

      - name: Build and push Docker instance images
        run: |
          sudo docker build --push --build-arg PROOFTYPE=register --build-arg SIZE_FILTER=small  -f Dockerfile.tee --target=instance -t ${{ secrets.DOCKER_ORGANIZATION }}/tee-server-register-instance:${{ inputs.tag }} .
          sudo docker build --push --build-arg PROOFTYPE=register --build-arg SIZE_FILTER=medium -f Dockerfile.tee --target=instance -t ${{ secrets.DOCKER_ORGANIZATION }}/tee-server-register-instance-medium:${{ inputs.tag }} .
          sudo docker build --push --build-arg PROOFTYPE=disclose --build-arg SIZE_FILTER=small  -f Dockerfile.tee --target=instance -t ${{ secrets.DOCKER_ORGANIZATION }}/tee-server-disclose-instance:${{ inputs.tag }} .
          sudo docker build --push --build-arg PROOFTYPE=dsc      --build-arg SIZE_FILTER=small  -f Dockerfile.tee --target=instance -t ${{ secrets.DOCKER_ORGANIZATION }}/tee-server-dsc-instance:${{ inputs.tag }} .
          sudo docker build --push --build-arg PROOFTYPE=dsc      --build-arg SIZE_FILTER=medium -f Dockerfile.tee --target=instance -t ${{ secrets.DOCKER_ORGANIZATION }}/tee-server-dsc-instance-medium:${{ inputs.tag }} .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: measurements
          path: measurements
